//////////////////////////////////////////////////////////////////////
// Optimizer.cpp: implementation of the COptimizer base class
//
// Copyright (C) 1996-2001
// $Id$
// U.S. Patent Pending
//////////////////////////////////////////////////////////////////////

// pre-compiled headers
#include "stdafx.h"

// the class definition
#include "Optimizer.h"

//////////////////////////////////////////////////////////////////////
// COptimizer::COptimizer
// 
// base class for all optimizers
//////////////////////////////////////////////////////////////////////
COptimizer::COptimizer(CObjectiveFunction *pFunc)
	: m_tolerance(0.5f),
		m_nIteration(0),
		m_pFunc(pFunc),
		m_bUseGradientInfo(FALSE)
{
}

//////////////////////////////////////////////////////////////////////
// COptimizer::~COptimizer
// 
// destroy the optimizer
//////////////////////////////////////////////////////////////////////
COptimizer::~COptimizer()
{
}

//////////////////////////////////////////////////////////////////////
// COptimizer::UseGradientInfo
// 
// returns the flag to indicate that gradient information should
//		be used
//////////////////////////////////////////////////////////////////////
BOOL COptimizer::UseGradientInfo() const
{
	return m_bUseGradientInfo;
}

//////////////////////////////////////////////////////////////////////
// COptimizer::SetUseGradientInfo
// 
// sets the flag to indicate that gradient information should
//		be used
//////////////////////////////////////////////////////////////////////
void COptimizer::SetUseGradientInfo(BOOL bUseGradientInfo)
{
	m_bUseGradientInfo = bUseGradientInfo;
}

//////////////////////////////////////////////////////////////////////
// COptimizer::GetTolerance
// 
// returns the tolerance for exit from optimization loop
//////////////////////////////////////////////////////////////////////
REAL COptimizer::GetTolerance() const
{
	return m_tolerance;
}

//////////////////////////////////////////////////////////////////////
// COptimizer::GetTolerance
// 
// sets the tolerance for exit from optimization loop
//////////////////////////////////////////////////////////////////////
void COptimizer::SetTolerance(REAL tol)
{
	m_tolerance = tol;
}

//////////////////////////////////////////////////////////////////////
// COptimizer::GetIterations
// 
// returns the number of iterations needed for the previous 
//		optimization
//////////////////////////////////////////////////////////////////////
int COptimizer::GetIterations() const
{
	return m_nIteration;
}

//////////////////////////////////////////////////////////////////////
// COptimizer::GetIterations
// 
// holds the final value of the optimization
//////////////////////////////////////////////////////////////////////
REAL COptimizer::GetFinalValue() const
{
	return m_finalValue;
}

//////////////////////////////////////////////////////////////////////
// COptimizer::GetFinalParameter
// 
// holds the final value of the parameters for the minimum f
//////////////////////////////////////////////////////////////////////
const CVectorN<>& COptimizer::GetFinalParameter() const
{
	return m_vFinalParam;
}

